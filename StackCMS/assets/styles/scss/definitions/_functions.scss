
//== Power Function
//
//    Example calculate 20^2:
//    .foo {
//        width: pow(20, 2) * 1px; // 400px
//    }
//

@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $number;
    }
  }

  @return $value;
}



//== Color function: color(name, level)
// -------------------------------------------------
// Set attribute level between 0-10 to set lightness. 0 = white, 5 = default, 10 = black
// Example:
// color(blue,3) = light blue
// color(blue,8) = dark blue
//
@function color($name, $level: 5) {
  @if map-has-key($colors, $name) {
    $color: map-get($colors, $name);
    $new-lightness: 100 - ($level * 10);
    @return change_color($color, $lightness: $new-lightness);
  }
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$name}`. "
        + "Please make sure it is defined in `$colors` map.";
  }
}

//== Material Color function: color(name, level)
// -------------------------------------------------
// Retrieves a color value from the $material-colors Sass map
// Inspired by https://github.com/minusfive/sass-material-colors/blob/master/sass/_sass-material-colors-function.scss
// 
// @function
// @param {string} color-name             - quoted, lower-case, dasherized color
//                                          name (e.g. 'pink', 'amber')
// @param {string} [color-variant='500']  - quoted, lowercase color variant (e.g.
//                                          '200', 'a100')
@function material-color($color-name, $color-variant: '500') {
  $color: map-get(map-get($material-colors, $color-name),$color-variant);
  @if $color {
    @return $color;
  } @else {
    @warn "=> ERROR: COLOR NOT FOUND! <= | Your $color-name, $color-variant combination did not match any of the values in the $material-colors map.";
  }
}


//== Font Size function: font-size(nameOrValue, relative: false, rootRelative: false)
// -------------------------------------------------
//      Returns pixel value if relative:false and em value if relative:true
//      Returns rem value if rootRelative:true
//      Usage example:
//      font-size(large), font-size(h4, false), font-size(2,false) returns 17.5px
//      font-size(large), font-size(h4), font-size(2) returns 1.25em
//       font-size(large, true, true) returns 1.25rem
//

@function fontSize($nameOrValue, $relative: true, $rootRelative: false) {
  $pixelValue: $font-size-root; //fallback value

  @if type-of($nameOrValue) == 'number' and unitless($nameOrValue) {

      @if $nameOrValue >= 1 {
          $pixelValue: $font-size-root * pow($font-scale, ($nameOrValue - 1));
          //@warn '#{$nameOrValue} is unitless number, above or equal to 1';
      }
      @else {
          $pixelValue: $font-size-root * $nameOrValue;
          //@warn '#{$nameOrValue} is unitless number, below 1';
      }
  }
  @else if type-of($nameOrValue) == 'number' and unit($nameOrValue) == 'px' {
      $pixelValue: $nameOrValue;
      //@warn '#{$nameOrValue} is px number';
  }
  @else if map-has-key($fontSizes, $nameOrValue) {
    $unitlessValue: map-get($fontSizes, $nameOrValue);
    $pixelValue: fontSize($unitlessValue, false);
    //@warn '#{$nameOrValue} is in fontSizes-map';
  }

  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$nameOrValue}`. "
        + "Please make sure it is defined in `$fontSizes` map.";
  }

  $value: $pixelValue;
  @if $rootRelative {
      $value: #{$pixelValue / $font-size-root}rem;
  }
  @else if $relative {
      $value: #{$pixelValue / $font-size-root}em;
  }
  
  //@warn '#{$nameOrValue} is returning #{$value}';
  @return $value;
}
